[
  {
    "objectID": "graphics/ggformula-intro.html",
    "href": "graphics/ggformula-intro.html",
    "title": "Graphics with ggformula",
    "section": "",
    "text": "There are several excellent graphics packages provided for R. The ggformula package currently builds on one of them, ggplot2, but provides a very different user interface for creating plots. The interface is based on formulas (much like the lattice interface) and the use of the chaining operator (|&gt;) to build more complex graphics from simpler components.\nThe ggformula graphics were designed with several user groups in mind:\n\nbeginners who want to get started quickly and may find the syntax of ggplot2() a bit offputting,\nthose familiar with lattice graphics, but wanting to be able to easily create multilayered plots,\nthose who prefer a formula interface, perhaps because it is familiar from use with functions like lm() or from use of the mosaic package for numerical summaries.\n\n\n\nThe basic template for creating a plot with ggformula is\n\ngf_plottype(formula, data = mydata)\n\nor, equivalently,\n\nmydata |&gt; gf_plottype(formula)\n\nwhere\n\nplottype describes the type of plot (layer) desired (points, lines, a histogram, etc., etc.),\nmydata is a data frame containing the variables used in the plot, and\nformula describes how/where those variables are used.\n\nFor example, in a bivariate plot, formula will take the form y ~ x, where y is the name of a variable to be plotted on the y-axis and x is the name of a variable to be plotted on the x-axis. (It is also possible to use expressions that can be evaluated using variables in the data frame as well.)\nThe first form of the tempate is useful for simple plots or for multi-layered plots where different layers use different data. The second form is useful for multi-layered plots or plots with many arguments.\nHere is a simple example:\n\n\n\n\n\n\n\n\n\n\n\nThe “kind of graphic” is specified by the name of the graphics function. All of the ggformula data graphics functions have names starting with gf_, which is intended to remind the user that they are formula-based interfaces to ggplot2: g for ggplot2 and f for “formula.” Commonly used functions include\n\ngf_point() for scatter plots\ngf_line() for line plots (connecting dots in a scatter plot)\ngf_density() or gf_dens() or gf_histogram() or gf_dhistogram() or gf_freqpoly() to display distributions of a quantitative variable\ngf_boxplot() or gf_violin() for comparing distributions side-by-side\ngf_counts() for bar-graph style depictions of counts.\ngf_bar() for more general bar-graph style graphics\n\nThe function names generally match a corresponding function name from ggplot2, although\n\ngf_counts() is a simplified special case of geom_bar(),\ngf_dens() is an alternative to gf_density() that displays the density plot slightly differently\ngf_dhistogram() produces a density histogram rather than a count histogram.\n\nEach of the gf_ functions can create the coordinate axes and fill it in one operation. (In ggplot2 nomenclature, gf_ functions create a frame and add a layer, all in one operation.) This is what happens for the first gf_ function in a chain. For subsequent gf_ functions, new layers are added, each one “on top of” the previous layers.\n\n\n\nEach of the marks in the plot is a glyph. Every glyph has graphical attributes (called aesthetics in ggplot2) that tell where and how to draw the glyph. In the above plot, the obvious attributes are x- and y-position:\nWe’ve told R to put mpg along the y-axis and hp along the x-asis, as is clear from the plot.\nBut each point also has other attributes, including color, shape, size, stroke, fill, and alpha (transparency). We didn’t specify those in our example, so gf_point() uses some default values for those – in this case smallish black filled-in circles.\n\n\nIn the gf_ functions, you specify the non-position graphical attributes using additional arguments to the function. Attributes can be set to a constant value (e.g, set the color to “blue”; set the size to 2) or they can be mapped to a variable in the data or some expression involving the variables (e.g., map the color to sex, so sex determines the color groupings)\nAttributes are set or mapped using additional arguments.\n\nadding an argument of the form attribute = value sets attribute to value.\nadding an argument of the form attribute = ~ expression maps attribute to expression\n\nwhere attribute is one of color, shape, etc., value is a constant (e.g. \"red\" or 0.5, as appropriate), and expression may be some more general expression that can be computed using the variables in data (although often is is better to create a new variable in the data and to use that variable instead of an on-the-fly calculation within the plot).\nThe following plot, for instance,\n\nWe use cyl to determine the color and carb to determine the size of each dot. Color and size are mapped to cyl and carb. A legend is provided to show us how the mapping is being done. (Later, we can use scales to control precisely how the mapping is done – which colors and sizes are used to represent which values of cyl and carb.)\nWe also set the transparency to 50%. The gives the same value of alpha to all glyphs in this layer.\n\n\n\n\n\n\n\n\n\n\n\n\nggformula allows for on-the-fly calculations of attributes, although the default labeling of the plot is often better if we create a new variable in our data frame. In the examples below, since there are only three values for carb, it is easier to read the graph if we tell R to treat cyl as a categorical variable by converting to a factor (or to a string). Except for the labeling of the legend, these two plots are the same. In the second example, we see how the ggformula works well with data tranformations using |&gt;.\n\n\n\n\n\n\n\n\n\n\n\n\nFor some plots, we only have to specify the x-position because the y-position is calculated from the x-values. Histograms, densityplots, and frequency polygons are examples. To illustrate, we’ll use density plots, but the same ideas apply to gf_histogram(), and gf_freqpolygon() as well. Note that in the one-variable density graphics, the variable whose density is to be calculated goes to the right of the tilde, in the position reserved for the x-axis variable.\n\n\n\n\n\n\n\n\nSeveral of the plotting functions include additional arguments that do not modify attributes of individual glyphs but control some other aspect of the plot. In this case, adjust can be used to increase or decrease the amount of smoothing.\n\n\n\n\n\n\n\n\n\n\n\nTo learn more about ggformula, see the longer version of this vignette available at https://www.mosaic-web.org/ggformula/. That version include sections on\n\nAdjusting position (stack, dodge, etc.)\nFaceting (coordinated subplots)\nPlot labeling (including using labels attached to the data by the labelled or expss packages)\nChaining to create complext (multi-layer) plots\nUsing jitter and transparency to deal with overplotting\nAdditional plot types\nUsing positions and stats\nVisualizing functions\nMaps\nPlotting distributions\nGlobal plot adjustments (themes, labels, etc.)\nHorizontal geoms",
    "crumbs": [
      "Home",
      "Graphics",
      "Graphics with ggformula"
    ]
  },
  {
    "objectID": "graphics/ggformula-intro.html#the-basic-formula-template",
    "href": "graphics/ggformula-intro.html#the-basic-formula-template",
    "title": "Graphics with ggformula",
    "section": "",
    "text": "The basic template for creating a plot with ggformula is\n\ngf_plottype(formula, data = mydata)\n\nor, equivalently,\n\nmydata |&gt; gf_plottype(formula)\n\nwhere\n\nplottype describes the type of plot (layer) desired (points, lines, a histogram, etc., etc.),\nmydata is a data frame containing the variables used in the plot, and\nformula describes how/where those variables are used.\n\nFor example, in a bivariate plot, formula will take the form y ~ x, where y is the name of a variable to be plotted on the y-axis and x is the name of a variable to be plotted on the x-axis. (It is also possible to use expressions that can be evaluated using variables in the data frame as well.)\nThe first form of the tempate is useful for simple plots or for multi-layered plots where different layers use different data. The second form is useful for multi-layered plots or plots with many arguments.\nHere is a simple example:",
    "crumbs": [
      "Home",
      "Graphics",
      "Graphics with ggformula"
    ]
  },
  {
    "objectID": "graphics/ggformula-intro.html#selecting-the-glyph-type",
    "href": "graphics/ggformula-intro.html#selecting-the-glyph-type",
    "title": "Graphics with ggformula",
    "section": "",
    "text": "The “kind of graphic” is specified by the name of the graphics function. All of the ggformula data graphics functions have names starting with gf_, which is intended to remind the user that they are formula-based interfaces to ggplot2: g for ggplot2 and f for “formula.” Commonly used functions include\n\ngf_point() for scatter plots\ngf_line() for line plots (connecting dots in a scatter plot)\ngf_density() or gf_dens() or gf_histogram() or gf_dhistogram() or gf_freqpoly() to display distributions of a quantitative variable\ngf_boxplot() or gf_violin() for comparing distributions side-by-side\ngf_counts() for bar-graph style depictions of counts.\ngf_bar() for more general bar-graph style graphics\n\nThe function names generally match a corresponding function name from ggplot2, although\n\ngf_counts() is a simplified special case of geom_bar(),\ngf_dens() is an alternative to gf_density() that displays the density plot slightly differently\ngf_dhistogram() produces a density histogram rather than a count histogram.\n\nEach of the gf_ functions can create the coordinate axes and fill it in one operation. (In ggplot2 nomenclature, gf_ functions create a frame and add a layer, all in one operation.) This is what happens for the first gf_ function in a chain. For subsequent gf_ functions, new layers are added, each one “on top of” the previous layers.",
    "crumbs": [
      "Home",
      "Graphics",
      "Graphics with ggformula"
    ]
  },
  {
    "objectID": "graphics/ggformula-intro.html#attributes",
    "href": "graphics/ggformula-intro.html#attributes",
    "title": "Graphics with ggformula",
    "section": "",
    "text": "Each of the marks in the plot is a glyph. Every glyph has graphical attributes (called aesthetics in ggplot2) that tell where and how to draw the glyph. In the above plot, the obvious attributes are x- and y-position:\nWe’ve told R to put mpg along the y-axis and hp along the x-asis, as is clear from the plot.\nBut each point also has other attributes, including color, shape, size, stroke, fill, and alpha (transparency). We didn’t specify those in our example, so gf_point() uses some default values for those – in this case smallish black filled-in circles.\n\n\nIn the gf_ functions, you specify the non-position graphical attributes using additional arguments to the function. Attributes can be set to a constant value (e.g, set the color to “blue”; set the size to 2) or they can be mapped to a variable in the data or some expression involving the variables (e.g., map the color to sex, so sex determines the color groupings)\nAttributes are set or mapped using additional arguments.\n\nadding an argument of the form attribute = value sets attribute to value.\nadding an argument of the form attribute = ~ expression maps attribute to expression\n\nwhere attribute is one of color, shape, etc., value is a constant (e.g. \"red\" or 0.5, as appropriate), and expression may be some more general expression that can be computed using the variables in data (although often is is better to create a new variable in the data and to use that variable instead of an on-the-fly calculation within the plot).\nThe following plot, for instance,\n\nWe use cyl to determine the color and carb to determine the size of each dot. Color and size are mapped to cyl and carb. A legend is provided to show us how the mapping is being done. (Later, we can use scales to control precisely how the mapping is done – which colors and sizes are used to represent which values of cyl and carb.)\nWe also set the transparency to 50%. The gives the same value of alpha to all glyphs in this layer.\n\n\n\n\n\n\n\n\n\n\n\n\nggformula allows for on-the-fly calculations of attributes, although the default labeling of the plot is often better if we create a new variable in our data frame. In the examples below, since there are only three values for carb, it is easier to read the graph if we tell R to treat cyl as a categorical variable by converting to a factor (or to a string). Except for the labeling of the legend, these two plots are the same. In the second example, we see how the ggformula works well with data tranformations using |&gt;.",
    "crumbs": [
      "Home",
      "Graphics",
      "Graphics with ggformula"
    ]
  },
  {
    "objectID": "graphics/ggformula-intro.html#one-variable-plots",
    "href": "graphics/ggformula-intro.html#one-variable-plots",
    "title": "Graphics with ggformula",
    "section": "",
    "text": "For some plots, we only have to specify the x-position because the y-position is calculated from the x-values. Histograms, densityplots, and frequency polygons are examples. To illustrate, we’ll use density plots, but the same ideas apply to gf_histogram(), and gf_freqpolygon() as well. Note that in the one-variable density graphics, the variable whose density is to be calculated goes to the right of the tilde, in the position reserved for the x-axis variable.\n\n\n\n\n\n\n\n\nSeveral of the plotting functions include additional arguments that do not modify attributes of individual glyphs but control some other aspect of the plot. In this case, adjust can be used to increase or decrease the amount of smoothing.",
    "crumbs": [
      "Home",
      "Graphics",
      "Graphics with ggformula"
    ]
  },
  {
    "objectID": "graphics/ggformula-intro.html#learning-more",
    "href": "graphics/ggformula-intro.html#learning-more",
    "title": "Graphics with ggformula",
    "section": "",
    "text": "To learn more about ggformula, see the longer version of this vignette available at https://www.mosaic-web.org/ggformula/. That version include sections on\n\nAdjusting position (stack, dodge, etc.)\nFaceting (coordinated subplots)\nPlot labeling (including using labels attached to the data by the labelled or expss packages)\nChaining to create complext (multi-layer) plots\nUsing jitter and transparency to deal with overplotting\nAdditional plot types\nUsing positions and stats\nVisualizing functions\nMaps\nPlotting distributions\nGlobal plot adjustments (themes, labels, etc.)\nHorizontal geoms",
    "crumbs": [
      "Home",
      "Graphics",
      "Graphics with ggformula"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Reference",
    "section": "",
    "text": "This website provides a reference for beginners who are using R in university courses (and beyond). Throughout the website, we will include many code examples. These code examples are live. You can edit the code and re-run it to see how things change.\n\nGive it a try. Run the code below to calculate 1 + 1. Then see if you can get R to compute the product 3 * 5 in the code block below.",
    "crumbs": [
      "Home",
      "R Reference"
    ]
  },
  {
    "objectID": "python/python-test.html",
    "href": "python/python-test.html",
    "title": "Python HTML Output",
    "section": "",
    "text": "Note\n\n\n\nThis example is based on https://r-wasm.github.io/quarto-live/other/py_output.html#example-altair-interactive-visualisation.\nThe quarto-live extension has support for displaying several types of IPython rich output and Jupyter Widgets with interactive code blocks."
  },
  {
    "objectID": "python/python-test.html#example-ipython-rich-output",
    "href": "python/python-test.html#example-ipython-rich-output",
    "title": "Python HTML Output",
    "section": "Example: IPython rich output",
    "text": "Example: IPython rich output"
  },
  {
    "objectID": "python/python-test.html#example-altair-interactive-visualisation",
    "href": "python/python-test.html#example-altair-interactive-visualisation",
    "title": "Python HTML Output",
    "section": "Example: Altair interactive visualisation",
    "text": "Example: Altair interactive visualisation\n\n\n\n\n\n\n\nJupyter Widgets\n\n\n\n\n\n\nNote\n\n\n\nAt the moment Jupyter widgets cannot be used as reactive inputs for quarto-live’s OJS integration. This is planned to be added in a future release of quarto-live."
  },
  {
    "objectID": "python/python-test.html#example-jupyter-widgets",
    "href": "python/python-test.html#example-jupyter-widgets",
    "title": "Python HTML Output",
    "section": "Example: Jupyter Widgets",
    "text": "Example: Jupyter Widgets\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAt the moment Jupyter widgets cannot be used as reactive inputs for quarto-live’s OJS integration. This is planned to be added in a future release of quarto-live."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]